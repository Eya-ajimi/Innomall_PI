package tn.esprit.gui.oussemacontroller;

import tn.esprit.entities.Reclamation;
import tn.esprit.entities.Utilisateur; // Assuming you have a User class
import tn.esprit.services.OussemaService.ReclamationService;
import javafx.fxml.FXML;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import tn.esprit.utils.Session;

public class ClientReclamationController {
    @FXML private TextField descriptionField;
    @FXML private TextField nomshopField;

    private ReclamationService reclamationService = new ReclamationService();
    private final Session session = Session.getInstance(); // Session management

    @FXML
    public void initialize() {
        // Fetch the current user from the session
        Utilisateur currentUser = session.getCurrentUser();

        // If a user is logged in, you can use their information
        if (currentUser != null) {
            System.out.println("Current User: " + currentUser.getId());
            // You can pre-fill fields or perform other actions based on the user
        } else {
            System.out.println("No user is currently logged in.");
            // Handle the case where no user is logged in (e.g., show an error or redirect)
        }
    }

    @FXML
    private void handleSubmit() {
        // Validate input fields
        if (descriptionField.getText().isEmpty() || nomshopField.getText().isEmpty()) {
            showAlert("Erreur de saisie", "Tous les champs doivent etre remplis.");
            return;
        }

        try {
            // Get the current user from the session
            Utilisateur currentUser = session.getCurrentUser();

            // Ensure a user is logged in
            if (currentUser == null) {
                showAlert("Erreur", "Aucun utilisateur connecte. Veuillez vous connecter.");
                return;
            }

            // Create a new Reclamation object with the current user's ID
            Reclamation reclamation = new Reclamation(
                    0, // ID (auto-generated by the database)
                    descriptionField.getText(), // Description
                    "", // Commentaire (empty by default)
                    nomshopField.getText(), // Shop name
                    "non traite" // Status
            );

            // Add the reclamation to the database with the current user's ID
            reclamationService.addReclamation(reclamation, currentUser);

            // Clear the input fields
            descriptionField.clear();
            nomshopField.clear();

            // Show a success message
            showSuccessAlert("Reclamation envoyee", "Votre reclamation a ete envoyee avec succes.");
        } catch (Exception e) {
            e.printStackTrace();
            showAlert("Erreur", "Une erreur s est produite lors de l envoi de la reclamation.");
        }
    }

    /**
     * Show an error alert with the given title and message.
     *
     * @param title   The title of the alert.
     * @param message The message to display.
     */
    private void showAlert(String title, String message) {
        Alert alert = new Alert(AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    /**
     * Show a success alert with the given title and message.
     *
     * @param title   The title of the alert.
     * @param message The message to display.
     */
    private void showSuccessAlert(String title, String message) {
        Alert alert = new Alert(AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}